/* eslint-disable no-var */ // T·∫Øt c·∫£nh b√°o eslint cho c·∫£ file

import { PrismaClient } from "@prisma/client"; // Import PrismaClient t·ª´ th∆∞ vi·ªán Prisma

// Khai b√°o bi·∫øn to√†n c·ª•c `cachedPrisma` ƒë·ªÉ l∆∞u Prisma Client trong m√¥i tr∆∞·ªùng ph√°t tri·ªÉn (development)
declare global {
  var cachedPrisma: PrismaClient;
}

/*
 * üìå Gi·∫£i th√≠ch chi ti·∫øt
 * T·∫°i sao c·∫ßn s·ª≠ d·ª•ng bi·∫øn to√†n c·ª•c (global.cachedPrisma)?
 *
 * Khi d√πng Next.js trong m√¥i tr∆∞·ªùng development, n·∫øu b·∫°n kh√¥ng cache Prisma Client, m·ªói l·∫ßn code thay ƒë·ªïi, m·ªôt instance m·ªõi c·ªßa PrismaClient s·∫Ω ƒë∆∞·ª£c t·∫°o ra. ƒêi·ªÅu n√†y c√≥ th·ªÉ g√¢y l·ªói "Too many connections" khi k·∫øt n·ªëi v·ªõi database.
 * V√¨ v·∫≠y, l∆∞u Prisma Client v√†o bi·∫øn to√†n c·ª•c (global.cachedPrisma) gi√∫p t√°i s·ª≠ d·ª•ng client thay v√¨ t·∫°o m·ªõi li√™n t·ª•c.
 * T·∫°i sao kh√¥ng c·∫ßn cache trong production?
 *
 * Trong production, ·ª©ng d·ª•ng ch·ªâ kh·ªüi ch·∫°y m·ªôt l·∫ßn (kh√¥ng c√≥ hot-reload nh∆∞ development).
 * V√¨ v·∫≠y, kh√¥ng c·∫ßn cache Prisma Client ‚Üí t·∫°o PrismaClient m·ªõi m·ªói khi server kh·ªüi ƒë·ªông.
 */

// Kh·ªüi t·∫°o bi·∫øn `prisma`
let prisma: PrismaClient;

// Ki·ªÉm tra m√¥i tr∆∞·ªùng hi·ªán t·∫°i
if (process.env.NODE_ENV === "production") {
  // N·∫øu ƒëang ch·∫°y trong m√¥i tr∆∞·ªùng production, t·∫°o m·ªôt PrismaClient m·ªõi
  prisma = new PrismaClient();
} else {
  // N·∫øu ƒëang ·ªü m√¥i tr∆∞·ªùng development:
  // Ki·ªÉm tra xem `cachedPrisma` ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o hay ch∆∞a
  if (!global.cachedPrisma) {
    global.cachedPrisma = new PrismaClient(); // N·∫øu ch∆∞a c√≥, t·∫°o m·ªõi PrismaClient v√† l∆∞u v√†o bi·∫øn to√†n c·ª•c
  }

  prisma = global.cachedPrisma; // S·ª≠ d·ª•ng l·∫°i PrismaClient ƒë√£ ƒë∆∞·ª£c cache
}

// Xu·∫•t Prisma Client d∆∞·ªõi t√™n `db` ƒë·ªÉ s·ª≠ d·ª•ng trong to√†n b·ªô d·ª± √°n
export const db = prisma;
